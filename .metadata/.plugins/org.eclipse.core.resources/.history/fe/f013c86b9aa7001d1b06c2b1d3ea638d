package comparatorInterface;

import java.util.Comparator;
import java.util.TreeSet;

/* Note: 
 * 
 * 1.if we are depending on default natural sorting order then objects should be homogeneous and comparable otherwise  we will get 
 *   run time exception saying class cast exception.
 *   
 * 2.but if we are defining our own sorting order by comparator then objects need not be homogeneous and comparable.
 *   we can insert heterogeneous non comparable objects also.  
 * 
 * Example as shown in below
 */

public class CompCompDemo {

	public static void main(String[] args) {
		
		Employee e = new Employee ("nag",100);
		Employee e1 = new Employee ("raj",112);
		Employee e2 = new Employee ("ravi",107);
		Employee e3 = new Employee ("venky",101);
		Employee e4 = new Employee ("ramesh",102);
		Employee e5 = new Employee ("suresh",110);
		Employee e6 = new Employee ("swamy",103);
		
		TreeSet t = new TreeSet();
		
		t.add(e);
		t.add(e1);
		t.add(e2);
		t.add(e3);
		t.add(e4);
		t.add(e5);
		t.add(e6);
		
		System.out.println("default sorting order based on eId : "+t);// default sorting order based on eId
		
		
		TreeSet t1 = new TreeSet( new MyComparator());
		
		t1.add(e);
		t1.add(e1);
		t1.add(e2);
		t1.add(e3);
		t1.add(e4);
		t1.add(e5);
		t1.add(e6);
		
		System.out.println("Alphabetical  sorting order based on name by using comparator :" + t1);
		 

		
		
	class  MyComparator implements Comparator {

		@Override
		public int compare(Object o1, Object o2) {
		
			Employee e1 =(Employee)o1;
			
			Employee e2=(Employee)o2;
			
			String s1 =e1.name;
			
			String s2=e2.name;
			
			
			return s.compareTo(s1);
		}
		
		
	}
	
	
		

	}

}
