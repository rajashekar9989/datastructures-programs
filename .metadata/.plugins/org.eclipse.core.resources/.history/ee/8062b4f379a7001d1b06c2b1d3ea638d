package setInterface;

import java.util.Comparator;
import java.util.TreeSet;

public class TreeSetDemo3 {

	public static void main(String[] args) {
		
		TreeSet  t = new TreeSet( new MyComparator());
		
		t.add(10);
		t.add(0);
		t.add(15);
		t.add(20);
		t.add(20);
		
		System.out.println(t);
		

	}

}

class MyComparator implements Comparator{

	@Override
	public int compare(Object o1, Object o2) {
		
		Integer i1 =(Integer)o1;
		Integer i2 =(Integer)02;
		
//		if(i1<i2)
//			
//			return +1;
//		
//		else if (i1>i2)
//			 return -1;
//		
//		else
//					 
//		return 0;
		
		//return i1.compareTo(i2);// default sorting order
		
		return i2.compareTo(i1);// decending order 
		
		
		return -i1.compareTo(i2);// decending order 
		
		
	}
	
	
}

/*   INTEGER OBJECTS INTO TREESET , DECENDING ORDER.
 * 
 * TreeSet t = new TreeSet( new MyComparator());
 * 
 * 	    t.add(10);
		t.add(0);---> +ve compare(0,10);
		t.add(15);---->-ve compare(15,0);
		
		t.add(20);-----> +ve  compare (20,10);
		t.add(20); ----> -ve compare(20,15);
		
		t.add(20);--------->  +ve compare(20,10);
		t.add(20);----------> -ve compare(20,15);
		t.add(20);-------->   0  compare(20,20);
		
		System.out.println(t)[20,15,10,0]
 * 
 * 
 * 1.At line 10 we are not passing MyComparator object then internally JVM will call CompareTo() method which is meant for default
 * natural sorting order.
 * 
 * 
 * in this case optput is [0,10,15,20]
 * 
 * 2.if we are passing Comparator object in line number 10 the interbnally JVM will call compare() method which is meant for customized sorting.
 * 
 * (i.e. decending order)
 * 
 * in this case output is [20,15,10,0]
 * 
 * 
 * 
 * 
 */

