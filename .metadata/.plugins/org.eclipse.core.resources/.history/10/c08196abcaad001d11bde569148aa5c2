package setInterface;

import java.util.Set;
import java.util.SortedSet;

public abstract class SortedSetDemo implements Set {
	
	
	/*  1. it is the child interface of the set.
	 * 
	 * 2.if we want torepresent a grop of individual objects  according to some  sorting order and duplicates
	 * 
	 * are not allowed then we should go for SortedSet
	 * 
	 * SortedSet Specific methods
	 * 
	 * 1.Object first();
	 * 
	 * -returns the first element of the sortedset.
	 * 
	 * 2.object last(); - returns the last element of the sortedset.
	 * 
	 * 3.SortedSet headSet(object obj) - returns the sorted set whose elements are <obj.
	 * 
	 * 4. SortedSET tallSet(object obj)-returns the sorted set whose elements are >= obj.
	 * 
	 * 
	 *5.  SortedSet subSet(object obj1, object obj2)
	 *   
	 *   -returns  the sortedSet whose elements are >obj1 and <obj2.
	 *   
	 * Comparator comparator();
	 * 
	 *   - returns Comparartor object that describes underlying sorting technique.
	 *   
	 *   if we are using default natural sorting order then we will get null.
	 *   
	 *   Example :  sortedaset ={100,101,103,104,107,110,115}
	 *   
	 *   1.firts(); --100
	 *   2.last();-- 115;
	 *   3.headSet(104);--{100,101,103}
	 *   4.tailSet(104);---{107,110,115}
	 *   5.subSet(103,110) --->  {103,104,107}
	 *   6.comparator()---> null
	 *   
	 *   
	 *   Note :
	 *   1.default soring order for nunmbers is acending order and for string alphabetical order.
	 *   
	 *   2. we can apply above methods only on sortedset implemented class objects.
	 *   
	 *   that is on the TreeSet object.
	  
	 *   
	 *
	 *
	 *
	 * 
	 */

	public static void main(String[] args) {
		
		
		SortedSet<Integer> s = new SortedSet<Integer>();
		
		s.add(100);
		s.add(101);
		s.add(103);
		s.add(104);
		s.add(107);
		s.add(110);
		s.add(115);
		
		System.out.println(s.first());
		System.out.println(s.last());
		System.out.println(s.headSet(104));
		System.out.println(s.tailSet(104));
		System.out.println(s.subSet(103,110));
		
		

	}

}
