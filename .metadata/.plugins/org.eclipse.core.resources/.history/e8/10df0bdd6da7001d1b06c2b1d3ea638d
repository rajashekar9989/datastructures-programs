package ComparableInterface;

public class ComparableDemo {
	
	/* this comparable interface present in java.lang package it contains only one methos i.e compareTo();
	 * 
	 *   public int compareTo(object o );
	 *   
	 *   Example:
	 *     
	 *     obj1.compareTo(obj2)
	 *     
	 *   1.  - returns -1 if obj1 has to  come before obj2.
	 *   
	 *   2. -returns  +1 if obj1 has to come after obj2.
	 *   
	 *   3. - returns 0 if  obj1 an obj2 are equal.
	 *   
	 * 
	 * 
	 */

	public static void main(String[] args) {
		
		
		System.out.println("1".compareTo("2"));//-ve  -1
		System.out.println("6".compareTo("9"));//+ve   +1
		System.out.println("2".compareTo("2"));// 0 
		System.out.println("A".compareTo(null));// Null pointer exception
		

	}

}

/*1. if we depending on default natural sorting order internally jvm will call compareTo() method will inserting objects 
 * to the TreeSet . hence the objects should be comparable 
 * 
 *  
 *  TreeSET T = new TreeSet();
 *  
 *  t.add("B");
 *  t.add("Z");//second element is compare to first element i.e ("Z").compareTo("B"); +ve  
 *  t.add("A");//A  compare to "B"; -ve 
 *  
 *  System.out.println(t)// [A,B,Z]
 *  
 *  Note:
 *  1. if we are not satisfied with default sorting order or if the default natural sorting order 
 *  is not available then we can define our own customized sorting by using Comparator interface.
 *  
 *  
 * 
 * */
